[{"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\index.js":"1","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\App.js":"3","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\store.js":"4","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\reducers\\eventReducer.js":"5","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\reducers\\userReducers.js":"6","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\Footer\\Footer.jsx":"7","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\Header\\Header.jsx":"8","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\LandingPage\\LandingPage.jsx":"9","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\MyEvents\\MyEvents.jsx":"10","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\LoginScreen\\LoginScreen.jsx":"11","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\RegisterScreen\\RegisterScreen.jsx":"12","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\SingleEvent\\CreateEvent.jsx":"13","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\ProfileScreen\\ProfileScreen.jsx":"14","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\SingleEvent\\SingleEvent.jsx":"15","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\constants\\eventsContants.js":"16","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\constants\\userConstants.js":"17","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\actions\\userAction.js":"18","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\actions\\eventsAction.js":"19","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\MainScreen.jsx":"20","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\Loading\\Loading.jsx":"21","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\ErroMessage\\ErrorMessage.jsx":"22","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\Homepage\\Homepage.js":"23","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\Dashboard\\Dashboard.js":"24","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\AllEvents\\Admins.js":"25","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\AllEvents\\AllEvents.js":"26"},{"size":672,"mtime":1659408459987,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1659408459991,"results":"29","hashOfConfig":"28"},{"size":1831,"mtime":1660257307089,"results":"30","hashOfConfig":"28"},{"size":1169,"mtime":1660252648722,"results":"31","hashOfConfig":"28"},{"size":2082,"mtime":1659408459989,"results":"32","hashOfConfig":"28"},{"size":2388,"mtime":1660252606705,"results":"33","hashOfConfig":"28"},{"size":851,"mtime":1660661880591,"results":"34","hashOfConfig":"28"},{"size":2683,"mtime":1659862893867,"results":"35","hashOfConfig":"28"},{"size":2089,"mtime":1660084487153,"results":"36","hashOfConfig":"28"},{"size":6599,"mtime":1660257162161,"results":"37","hashOfConfig":"28"},{"size":2840,"mtime":1659408459996,"results":"38","hashOfConfig":"28"},{"size":5930,"mtime":1660248353365,"results":"39","hashOfConfig":"28"},{"size":7907,"mtime":1659725145057,"results":"40","hashOfConfig":"28"},{"size":6643,"mtime":1659408460055,"results":"41","hashOfConfig":"28"},{"size":8237,"mtime":1659408460083,"results":"42","hashOfConfig":"28"},{"size":724,"mtime":1659408459984,"results":"43","hashOfConfig":"28"},{"size":733,"mtime":1660087135698,"results":"44","hashOfConfig":"28"},{"size":4989,"mtime":1660252241032,"results":"45","hashOfConfig":"28"},{"size":5167,"mtime":1660257564744,"results":"46","hashOfConfig":"28"},{"size":726,"mtime":1659408459983,"results":"47","hashOfConfig":"28"},{"size":621,"mtime":1659408459971,"results":"48","hashOfConfig":"28"},{"size":317,"mtime":1659408459968,"results":"49","hashOfConfig":"28"},{"size":556,"mtime":1659411006370,"results":"50","hashOfConfig":"28"},{"size":3897,"mtime":1660255317626,"results":"51","hashOfConfig":"28"},{"size":1664,"mtime":1660255799775,"results":"52","hashOfConfig":"28"},{"size":6667,"mtime":1660257741019,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1fojlsr",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\index.js",[],["116","117"],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\App.js",["118"],"import './App.css';\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Footer from './components/Footer/Footer';\r\nimport Header from './components/Header/Header';\r\nimport LandingPage from './screens/LandingPage/LandingPage';\r\nimport HomePage from './screens/Homepage/Homepage';\r\nimport MyEvents from './screens/MyEvents/MyEvents';\r\nimport LoginScreen from './screens/LoginScreen/LoginScreen';\r\nimport RegisterScreen from './screens/RegisterScreen/RegisterScreen';\r\nimport CreateEvent from './screens/SingleEvent/CreateEvent';\r\nimport SingleEvent from './screens/SingleEvent/SingleEvent';\r\nimport ProfileScreen from './screens/ProfileScreen/ProfileScreen';\r\nimport Dashboard from './screens/Dashboard/Dashboard';\r\nimport Admins from './screens/AllEvents/Admins';\r\nimport AllEvents from './screens/AllEvents/AllEvents';\r\n\r\nfunction App () {\r\n  const [ search, setSearch ] = useState( \"\" );\r\n  return (\r\n    <Router>\r\n      <Header setSearch={ ( s ) => setSearch( s ) } />\r\n      <main >\r\n        <Route exact path='/' component={LandingPage} />\r\n        <Route path='/homePage' component={RegisterScreen} />\r\n        <Route path='/admins' component={Admins} />\r\n        <Route path='/dashboard' component={ Dashboard } />\r\n        <Route path='/login' component={ LoginScreen } />\r\n        <Route path='/register' component={ RegisterScreen } />\r\n        <Route path='/allevents' component={ AllEvents } />\r\n        <Route path='/myevents' component={ () => <MyEvents search={ search } /> } />\r\n        <Route path='/event/:id' component={ SingleEvent } />\r\n        <Route path='/createevent' component={ CreateEvent } />\r\n        <Route path=\"/profile\" component={ ProfileScreen } />\r\n      </main>\r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\store.js",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\reducers\\eventReducer.js",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\LandingPage\\LandingPage.jsx",["119"],"import React, { useEffect } from 'react';\r\nimport {Container, Row } from 'react-bootstrap';\r\nimport './LandingPage.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { listEvents } from '../../actions/eventsAction';\r\n\r\nconst LandingPage = () => {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const events = useSelector( ( state ) => state.eventList );\r\n\r\n    useEffect( () => {\r\n     //   const userInfo = localStorage.getItem( 'userInfo' );\r\n    }, [ history ] );\r\n\r\n    useEffect( () => {\r\n        dispatch( listEvents() )\r\n    }, []);\r\n    useEffect( () => {\r\n        console.log(events)\r\n    }, [events] );\r\n    //listEvents\r\n\r\n    return (\r\n        <div className='main'>\r\n            <Container>\r\n                <Row>\r\n                    <div className='intro-text'>\r\n                        <div>\r\n                            <h1 className='title'>FPB school calender</h1>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                      Array.isArray(events.events) && events.events.map((e, i) => {\r\n                          return (<EventsDisplay e={e} />)\r\n                        })\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EventsDisplay = ({e}) => {\r\n    console.log(e)\r\n    return (\r\n        <div className='event-holder'>\r\n                              <div className='event_Date'>\r\n                                  Date:{e.edate}\r\n                              </div>\r\n                              <div className='e-head-d'>\r\n                                  <div className='event_head'>\r\n                                    {e.title}\r\n                                  </div>\r\n                                  <button className='event_btn-see'>\r\n                                    See more\r\n                                  </button>\r\n                                </div>\r\n                            </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;\r\n","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\MyEvents\\MyEvents.jsx",["120","121"],"import React, { useEffect } from 'react';\r\nimport MainScreen from '../../components/MainScreen';\r\nimport { Link } from 'react-router-dom';\r\nimport { Accordion, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\n\r\nimport './MyEvents.css';\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteEventAction, listMyEvents } from \"../../actions/eventsAction\";\r\nimport Loading from \"../../components/Loading/Loading\";\r\nimport ErrorMessage from \"../../components/ErroMessage/ErrorMessage\";\r\n\r\n\r\nconst MyEvents = ( { history, search } ) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const eventList = useSelector( ( state ) => state.eventList );\r\n    const { loading, error, events } = eventList;\r\n\r\n\r\n    const userLogin = useSelector( ( state ) => state.userLogin );\r\n    const { userInfo } = userLogin;\r\n\r\n    const eventDelete = useSelector( ( state ) => state.eventDelete );\r\n    const {\r\n        loading: loadingDelete,\r\n        error: errorDelete,\r\n        success: successDelete,\r\n    } = eventDelete;\r\n\r\n    const eventCreate = useSelector( ( state ) => state.eventCreate );\r\n    const { success: successCreate } = eventCreate;\r\n\r\n    const eventUpdate = useSelector( ( state ) => state.eventUpdate );\r\n    const { success: successUpdate } = eventUpdate;\r\n\r\n    useEffect( () => {\r\n        dispatch( listMyEvents() );\r\n        if ( !userInfo ) {\r\n            history?.push( \"/\" );\r\n        }\r\n    }, [\r\n        dispatch,\r\n        history,\r\n        userInfo,\r\n        successDelete,\r\n        successCreate,\r\n        successUpdate,\r\n    ] );\r\n\r\n    const deleteHandler = ( id ) => {\r\n        if ( window.confirm( \"Are you sure?\" ) ) {\r\n            dispatch( deleteEventAction( id ) );\r\n        }\r\n    };\r\n    return (\r\n        <MainScreen title={ `Hi ${ userInfo?.name }.` }>\r\n            <Link to='/createevent'>\r\n                <Button\r\n                    styles={ { marginLeft: 10, marginBottom: 6 } }\r\n                    size='lg'\r\n                >\r\n                    Create New Event\r\n                </Button>\r\n            </Link>\r\n            { error && <ErrorMessage variant='danger' /> }\r\n            { loading && <Loading /> }\r\n            { events && events.filter( ( filteredEvent ) =>\r\n                filteredEvent.title.toLowerCase().includes( search.toLowerCase() ) ).reverse().map( ( event ) => {\r\n                    return <Accordion key={ event._id }>\r\n                        <Card style={ { margin: 10 } }>\r\n                            <Card.Header style={ { display: 'flex' } }>\r\n                                <span style={ {\r\n                                    color: 'black',\r\n                                    textDecoration: 'none',\r\n                                    flex: 1,\r\n                                    cursor: 'pointer',\r\n                                    alignSelf: 'center',\r\n                                    fontSize: 18,\r\n\r\n                                } }\r\n                                >\r\n                                    <Accordion.Toggle\r\n                                        as={ Link }\r\n                                        variant='link'\r\n                                        eventKey='0'\r\n                                    >\r\n                                        { event.title } by { event.user.name }\r\n                                    </Accordion.Toggle>\r\n                                    \r\n                                </span>\r\n                                <div>\r\n                                    <Button\r\n                                        href={ `/event/${ event._id }` }\r\n                                    >\r\n                                        Edit\r\n                                    </Button>\r\n                                    <Button\r\n                                        className='mx-2'\r\n                                        variant='danger'\r\n                                        onClick={ () => deleteHandler( event._id ) }\r\n                                    >\r\n                                        Delete</Button>\r\n                                </div>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey='0'>\r\n                                <Card.Body>\r\n                                    <Row className=\"eventBodyContainer\">\r\n                                        <Col md={ 6 }>\r\n                                            <h4>\r\n                                                <Badge variant='success'> Event category: { event.category }</Badge>\r\n                                            </h4>\r\n                                            <blockquote className=\"blockquote mb-0\">\r\n                                                <p>\r\n                                                    { event.content }\r\n                                                </p>\r\n                                                <footer className=\"blockquote-footer\">\r\n                                                    Created on{ \" \" }\r\n                                                    <cite title=\"Source Title\">\r\n                                                        { event.createdAt.substring( 0, 10 ) }\r\n                                                    </cite>\r\n                                                </footer>\r\n                                            </blockquote>\r\n                                        </Col>\r\n                                        <Col\r\n                                            style={ {\r\n                                                display: \"flex\",\r\n                                                alignItems: \"center\",\r\n                                                justifyContent: \"center\",\r\n                                            } }\r\n                                        >\r\n                                            <img\r\n                                                src={ event.pic }\r\n                                                alt={ event.name }\r\n                                                className=\"eventPic\"\r\n                                                style={ { width: 420, height: 420 } }\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>;\r\n                } ) }\r\n        </MainScreen >\r\n    );\r\n};\r\n\r\nexport default MyEvents;\r\n","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\LoginScreen\\LoginScreen.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\RegisterScreen\\RegisterScreen.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\SingleEvent\\CreateEvent.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\ProfileScreen\\ProfileScreen.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\SingleEvent\\SingleEvent.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\constants\\eventsContants.js",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\actions\\userAction.js",["122"],"import axios from 'axios';\r\nimport {\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGOUT,\r\n    USER_REGISTER_FAIL,\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_ADMIN_REQUEST,\r\n    USER_ADMIN_SUCCESS,\r\n    USER_ADMIN_FAIL\r\n} from './../constants/userConstants';\r\n\r\nexport const login = ( email, password ) => async ( dispatch ) => {\r\n    try {\r\n        dispatch( { type: USER_LOGIN_REQUEST } );\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            \"/api/users/login\",\r\n            { email, password },\r\n            config\r\n        );\r\n\r\n        dispatch( { type: USER_LOGIN_SUCCESS, payload: data } );\r\n\r\n        localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n    } catch ( error ) {\r\n        dispatch( {\r\n            type: USER_LOGIN_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        } );\r\n    }\r\n};\r\n\r\n\r\nexport const logout = () => async ( dispatch ) => {\r\n    localStorage.removeItem( \"userInfo\" );\r\n    dispatch( { type: USER_LOGOUT } );\r\n};\r\n\r\n\r\nexport const register = ( name, email, password, pic ) => async ( dispatch ) => {\r\n    try {\r\n        dispatch( { type: USER_REGISTER_REQUEST } );\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            \"/api/users\",\r\n            { name, pic, email, password },\r\n            config\r\n        );\r\n\r\n        dispatch( { type: USER_REGISTER_SUCCESS, payload: data } );\r\n\r\n        dispatch( { type: USER_LOGIN_SUCCESS, payload: data } );\r\n\r\n        localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n    } catch ( error ) {\r\n        dispatch( {\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const registerAdmin = ( name, email, password, pic, admin ) => async ( dispatch ) => {\r\n    try {\r\n        //dispatch( { type: USER_REGISTER_REQUEST } );\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            \"/api/users\",\r\n            { name, pic, email, password, admin },\r\n            config\r\n        );\r\n\r\n//console.log(data)\r\n\r\n       // localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n    } catch ( error ) {\r\n        dispatch( {\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        } );\r\n    }\r\n};\r\n\r\n\r\nexport const updateProfile = ( user ) => async ( dispatch, getState ) => {\r\n    try {\r\n        dispatch( { type: USER_UPDATE_REQUEST } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post( \"/api/users/profile\", user, config );\r\n\r\n        dispatch( { type: USER_UPDATE_SUCCESS, payload: data } );\r\n\r\n        dispatch( { type: USER_LOGIN_SUCCESS, payload: data } );\r\n\r\n        localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n    } catch ( error ) {\r\n        dispatch( {\r\n            type: USER_UPDATE_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const getAdmins = (  ) => async ( dispatch, getState ) => {\r\n    try {\r\n        dispatch( { type: USER_ADMIN_REQUEST,} );\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.get( \"/api/users/admins\", config );\r\n\r\n        //console.log(data)\r\n        dispatch( { type: USER_ADMIN_SUCCESS, payload: data } );\r\n\r\n    } catch ( error ) {\r\n        dispatch( {\r\n            type: USER_ADMIN_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        } );\r\n    }\r\n};","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\actions\\eventsAction.js",["123","124"],"import {\r\n    EVENTS_CREATE_FAIL,\r\n    EVENTS_CREATE_REQUEST,\r\n    EVENTS_CREATE_SUCCESS,\r\n    EVENTS_DELETE_FAIL,\r\n    EVENTS_DELETE_REQUEST,\r\n    EVENTS_DELETE_SUCCESS,\r\n    EVENTS_LIST_FAIL,\r\n    EVENTS_LIST_REQUEST,\r\n    EVENTS_LIST_SUCCESS,\r\n    EVENTS_UPDATE_FAIL,\r\n    EVENTS_UPDATE_REQUEST,\r\n    EVENTS_UPDATE_SUCCESS,\r\n} from \"../constants/eventsContants\";\r\nimport axios from \"axios\";\r\n\r\nexport const listEvents = () => async ( dispatch, getState ) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_LIST_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n           //     Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.get( `/api/events/all` );\r\n\r\n        dispatch( {\r\n            type: EVENTS_LIST_SUCCESS,\r\n            payload: data,\r\n        });\r\n        \r\n        console.log(data)\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_LIST_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const listMyEvents = () => async ( dispatch, getState ) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_LIST_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n             Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.get( `/api/events/allmine`, config );\r\n\r\n        dispatch( {\r\n            type: EVENTS_LIST_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_LIST_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const createEventAction = ( title, content, category, pic, edate) => async (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_CREATE_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            `/api/events/create`,\r\n            { title, content, category, pic, edate },\r\n            config\r\n        );\r\n\r\n        dispatch( {\r\n            type: EVENTS_CREATE_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_CREATE_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const deleteEventAction = ( id ) => async ( dispatch, getState ) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_DELETE_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.delete( `/api/events/${ id }`, config );\r\n\r\n        dispatch( {\r\n            type: EVENTS_DELETE_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_DELETE_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const updateEventAction = ( id, title, content, category, pic ) => async (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_UPDATE_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.put(\r\n            `/api/events/${ id }`,\r\n            { title, content, category, pic },\r\n            config\r\n        );\r\n\r\n        dispatch( {\r\n            type: EVENTS_UPDATE_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_UPDATE_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\MainScreen.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\Loading\\Loading.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\components\\ErroMessage\\ErrorMessage.jsx",[],"C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\Homepage\\Homepage.js",["125","126","127","128","129"],"import React, { useEffect } from 'react';\r\nimport { Button, Container, Row } from 'react-bootstrap';\r\nimport './Homepage.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst HomePage = () => {\r\n\r\n    const history = useHistory();\r\n\r\n  /*  useEffect( () => {\r\n        const userInfo = localStorage.getItem( 'userInfo' );\r\n        if ( userInfo ) {\r\n            history.push( '/myevents' );\r\n        }\r\n    }, [ history ] );\r\n*/\r\n\r\n    return (\r\n        <div className='main'>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\Dashboard\\Dashboard.js",["130","131","132","133"],"import React, { useEffect, useState } from 'react';\r\n//import { Button, Container, Row } from 'react-bootstrap';//\r\nimport './Dashboard.css';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registerAdmin } from './../../actions/userAction';\r\n\r\nconst Dashboard = () => {\r\n   // const history = useHistory();\r\n    const [sna, setSna] = useState(false)\r\n    const [sa, setSa] = useState(false)\r\n    const userRegister = useSelector((state) => state.userRegister);\r\n    const { loading, error, userInfo } = userRegister;\r\n\r\n        useEffect( () => {\r\n        const userInfo = localStorage.getItem( 'userInfo' );\r\n            if ( JSON.parse(userInfo).admin ) {\r\n                setSa(JSON.parse(userInfo).admin)\r\n            }\r\n        }, [ userInfo ] );\r\n\r\n    const setNewAdmin = () => {\r\n        setSna(!sna)\r\n    }\r\n\r\n    return (\r\n        <div className='dashboard__'>\r\n            {sna && <NewAdmModel setNewAdmin={setNewAdmin } />}\r\n            <div className='db-comp'>\r\n                <Link to='/createevent' className='d-link-box'>\r\n                    <div>Create Event</div>\r\n                </Link>\r\n                <Link to='/allevents' className='d-link-box'>\r\n                    <div>All Events</div>\r\n                </Link>\r\n                {\r\n                   sa &&\r\n                    <div>\r\n                        <div onClick={setNewAdmin} className='d-link-box'>\r\n                            <div>New Admin</div>\r\n                        </div>\r\n                        <Link to='/admins' className='d-link-box'>\r\n                            <div>All Admins</div>\r\n                        </Link>\r\n                    </div>\r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst NewAdmModel = ({ setNewAdmin }) => {\r\n    const history = useHistory();\r\n    const [email, setEmail] = useState('')\r\n    const [pass, setPass] = useState('')\r\n    const [fullname, setFullName] = useState('')\r\n    const [admin, setAdm] = useState(false)\r\n    const [pic, setPic] = useState(\r\n        \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\"\r\n    );\r\n    const dispatch = useDispatch();\r\n    //const userRegister = useSelector((state) => state.userRegister);\r\n  //  const { loading, error, userInfo } = userRegister;\r\n    \r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (email === '' || pass === '' || fullname === '') {\r\n            return\r\n        }\r\n        dispatch(registerAdmin(fullname, email, pass, pic, admin));\r\n        clearForm()\r\n        \r\n    };\r\n\r\n    const clearForm = () => {\r\n        setEmail('')\r\n        setPass('')\r\n        setFullName('')\r\n        setAdm('')\r\n    }\r\n    return (\r\n        <div className='newadm-model'>\r\n            <div className='nad-form-holder'>\r\n                <input type='text' onChange={(e) => setFullName(e.target.value)} value={fullname} placeholder='Full Name' className='new-adm' />\r\n                <input type='email' onChange={(e)=>setEmail(e.target.value)} value={email} placeholder='Email' className='new-adm'/>\r\n                <input type='password' onChange={(e) => setPass(e.target.value)} value={pass} placeholder='Password' className='new-adm' />\r\n                <select className='new-adm' onChange={(e)=>{setAdm(e.target.value)}}>\r\n                    <option value={false}>Collaborator</option>\r\n                    <option value={true}>Admin</option>\r\n                </select>\r\n                <div className='double-btn-container'>\r\n                    <button onClick={submitHandler } className='create-new-adm'>CREATE</button>\r\n                    <button  onClick={setNewAdmin} className='create-new-adm'>CANCEL</button>\r\n               </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\AllEvents\\Admins.js",["134","135","136","137","138"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAdmins } from './../../actions/userAction';\r\n\r\nconst Admins = () => {\r\n   // const history = useHistory();\r\n    //const [sna, setSna] = useState(false)\r\n    const [users, setUsers] = useState([{}])\r\n    const [looding, setLoading] = useState(true)\r\n    const dispatch = useDispatch();\r\n    \r\n    const adms = useSelector(state => state.userAdmins);\r\n    const { loading, admins } = adms;\r\n   \r\n    useEffect(() => {\r\n        dispatch( getAdmins() );\r\n        }, [dispatch] );\r\n\r\n        useEffect(() => {\r\n           \r\n                setLoading(loading)\r\n                setUsers(admins)\r\n            \r\n        }, [admins]);\r\n\r\n    return (\r\n        <div className='dashboard__'>\r\n            \r\n            <div className='rowAdmin'><h1>AMINS</h1></div>\r\n            <div className='rowAdmin'>\r\n                        <div className='adm-name'>NAME</div>\r\n                        <div className='adm-name'>EMAIL</div>\r\n                        <div className='adm-name'>ADMIN TYPE</div>\r\n                    </div>\r\n            {\r\n                admins&& admins.map((e,i) => {\r\n                    return <div key={i} className='rowAdmin'>\r\n                        <div className='adm-name'>{e.name}</div>\r\n                        <div className='adm-name'>{e.email}</div>\r\n                        <div className='adm-name'>{e.admin===true?'Admin':'Collaborator'}</div>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Admins;","C:\\Users\\DEX\\Documents\\GitHub\\SchoolProjects\\silace\\frontend\\src\\screens\\AllEvents\\AllEvents.js",["139","140"],"import React, { useEffect } from 'react';\r\nimport MainScreen from '../../components/MainScreen';\r\nimport { Link } from 'react-router-dom';\r\nimport { Accordion, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\n\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteEventAction, listEvents } from \"../../actions/eventsAction\";\r\nimport Loading from \"../../components/Loading/Loading\";\r\nimport ErrorMessage from \"../../components/ErroMessage/ErrorMessage\";\r\n\r\n\r\nconst AllEvents = ( { history, search } ) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const eventList = useSelector( ( state ) => state.eventList );\r\n    const { loading, error, events } = eventList;\r\n\r\n\r\n    const userLogin = useSelector( ( state ) => state.userLogin );\r\n    const { userInfo } = userLogin;\r\n\r\n    const eventDelete = useSelector( ( state ) => state.eventDelete );\r\n    const {\r\n        loading: loadingDelete,\r\n        error: errorDelete,\r\n        success: successDelete,\r\n    } = eventDelete;\r\n\r\n    const eventCreate = useSelector( ( state ) => state.eventCreate );\r\n    const { success: successCreate } = eventCreate;\r\n\r\n    const eventUpdate = useSelector( ( state ) => state.eventUpdate );\r\n    const { success: successUpdate } = eventUpdate;\r\n\r\n    useEffect(() => {\r\n        \r\n        dispatch( listEvents() );\r\n        if ( !userInfo ) {\r\n            history?.push( \"/\" );\r\n        }\r\n    }, [\r\n        dispatch,\r\n        history,\r\n        userInfo,\r\n        successDelete,\r\n        successCreate,\r\n        successUpdate,\r\n    ] );\r\n\r\n    useEffect(() => {\r\n        \r\n       console.log(eventList)\r\n    }, [eventList] );\r\n    const deleteHandler = ( id ) => {\r\n        if ( window.confirm( \"Are you sure?\" ) ) {\r\n            dispatch( deleteEventAction( id ) );\r\n        }\r\n    };\r\n    return (\r\n        <MainScreen title={ `Hi ${ userInfo?.name }.` }>\r\n            <Link to='/createevent'>\r\n                <Button\r\n                    styles={ { marginLeft: 10, marginBottom: 6 } }\r\n                    size='lg'\r\n                >\r\n                    Create New Event\r\n                </Button>\r\n            </Link>\r\n            { error && <ErrorMessage variant='danger' /> }\r\n            { loading && <Loading /> }\r\n            { events && events.filter( ( filteredEvent ) =>\r\n                filteredEvent.title.toLowerCase().includes( search.toLowerCase() ) ).reverse().map( ( event ) => {\r\n                    return <Accordion key={ event._id }>\r\n                        <Card style={ { margin: 10 } }>\r\n                            <Card.Header style={ { display: 'flex' } }>\r\n                                <span style={ {\r\n                                    color: 'black',\r\n                                    textDecoration: 'none',\r\n                                    flex: 1,\r\n                                    cursor: 'pointer',\r\n                                    alignSelf: 'center',\r\n                                    fontSize: 18,\r\n\r\n                                } }\r\n                                >\r\n                                    <Accordion.Toggle\r\n                                        as={ Link }\r\n                                        variant='link'\r\n                                        eventKey='0'\r\n                                    >\r\n                                        { event.title } by { event.user.name }\r\n                                    </Accordion.Toggle>\r\n                                    \r\n                                </span>\r\n                                <div>\r\n                                    <Button\r\n                                        href={ `/event/${ event._id }` }\r\n                                    >\r\n                                        Edit\r\n                                    </Button>\r\n                                    <Button\r\n                                        className='mx-2'\r\n                                        variant='danger'\r\n                                        onClick={ () => deleteHandler( event._id ) }\r\n                                    >\r\n                                        Delete</Button>\r\n                                </div>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey='0'>\r\n                                <Card.Body>\r\n                                    <Row className=\"eventBodyContainer\">\r\n                                        <Col md={ 6 }>\r\n                                            <h4>\r\n                                                <Badge variant='success'> Event category: { event.category }</Badge>\r\n                                            </h4>\r\n                                            <blockquote className=\"blockquote mb-0\">\r\n                                                <p>\r\n                                                    { event.content }\r\n                                                </p>\r\n                                                <footer className=\"blockquote-footer\">\r\n                                                    Created on{ \" \" }\r\n                                                    <cite title=\"Source Title\">\r\n                                                        { event.createdAt.substring( 0, 10 ) }\r\n                                                    </cite>\r\n                                                </footer>\r\n                                            </blockquote>\r\n                                        </Col>\r\n                                        <Col\r\n                                            style={ {\r\n                                                display: \"flex\",\r\n                                                alignItems: \"center\",\r\n                                                justifyContent: \"center\",\r\n                                            } }\r\n                                        >\r\n                                            <img\r\n                                                src={ event.pic }\r\n                                                alt={ event.name }\r\n                                                className=\"eventPic\"\r\n                                                style={ { width: 420, height: 420 } }\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>;\r\n                } ) }\r\n        </MainScreen >\r\n    );\r\n};\r\n\r\nexport default AllEvents;\r\n",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":7,"column":8,"nodeType":"147","messageId":"148","endLine":7,"endColumn":16},{"ruleId":"149","severity":1,"message":"150","line":20,"column":8,"nodeType":"151","endLine":20,"endColumn":10,"suggestions":"152"},{"ruleId":"145","severity":1,"message":"153","line":26,"column":18,"nodeType":"147","messageId":"148","endLine":26,"endColumn":31},{"ruleId":"145","severity":1,"message":"154","line":27,"column":16,"nodeType":"147","messageId":"148","endLine":27,"endColumn":27},{"ruleId":"145","severity":1,"message":"155","line":97,"column":17,"nodeType":"147","messageId":"148","endLine":97,"endColumn":21},{"ruleId":"145","severity":1,"message":"156","line":24,"column":26,"nodeType":"147","messageId":"148","endLine":24,"endColumn":34},{"ruleId":"145","severity":1,"message":"157","line":27,"column":15,"nodeType":"147","messageId":"148","endLine":27,"endColumn":21},{"ruleId":"145","severity":1,"message":"158","line":1,"column":17,"nodeType":"147","messageId":"148","endLine":1,"endColumn":26},{"ruleId":"145","severity":1,"message":"159","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":16},{"ruleId":"145","severity":1,"message":"160","line":2,"column":18,"nodeType":"147","messageId":"148","endLine":2,"endColumn":27},{"ruleId":"145","severity":1,"message":"161","line":2,"column":29,"nodeType":"147","messageId":"148","endLine":2,"endColumn":32},{"ruleId":"145","severity":1,"message":"162","line":8,"column":11,"nodeType":"147","messageId":"148","endLine":8,"endColumn":18},{"ruleId":"145","severity":1,"message":"163","line":13,"column":13,"nodeType":"147","messageId":"148","endLine":13,"endColumn":20},{"ruleId":"145","severity":1,"message":"164","line":13,"column":22,"nodeType":"147","messageId":"148","endLine":13,"endColumn":27},{"ruleId":"145","severity":1,"message":"162","line":54,"column":11,"nodeType":"147","messageId":"148","endLine":54,"endColumn":18},{"ruleId":"145","severity":1,"message":"165","line":59,"column":17,"nodeType":"147","messageId":"148","endLine":59,"endColumn":23},{"ruleId":"145","severity":1,"message":"166","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":14},{"ruleId":"145","severity":1,"message":"167","line":2,"column":16,"nodeType":"147","messageId":"148","endLine":2,"endColumn":26},{"ruleId":"145","severity":1,"message":"168","line":9,"column":12,"nodeType":"147","messageId":"148","endLine":9,"endColumn":17},{"ruleId":"145","severity":1,"message":"169","line":10,"column":12,"nodeType":"147","messageId":"148","endLine":10,"endColumn":19},{"ruleId":"149","severity":1,"message":"170","line":25,"column":12,"nodeType":"151","endLine":25,"endColumn":20,"suggestions":"171"},{"ruleId":"145","severity":1,"message":"153","line":25,"column":18,"nodeType":"147","messageId":"148","endLine":25,"endColumn":31},{"ruleId":"145","severity":1,"message":"154","line":26,"column":16,"nodeType":"147","messageId":"148","endLine":26,"endColumn":27},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"no-unused-vars","'HomePage' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["174"],"'loadingDelete' is assigned a value but never used.","'errorDelete' is assigned a value but never used.","'data' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'config' is assigned a value but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'history' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'setPic' is assigned a value but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","'users' is assigned a value but never used.","'looding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.",["175"],"no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [dispatch]",{"range":"180","text":"181"},"Update the dependencies array to be: [admins, loading]",{"range":"182","text":"183"},[635,637],"[dispatch]",[791,799],"[admins, loading]"]