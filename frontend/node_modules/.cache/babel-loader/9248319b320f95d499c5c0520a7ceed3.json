{"ast":null,"code":"var _jsxFileName = \"E:\\\\003_Personal_Portfolio\\\\Experimental\\\\event-manager\\\\frontend\\\\src\\\\screens\\\\SingleNote\\\\CreateEvent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport MainScreen from \"../../components/MainScreen\";\nimport { Button, Card, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createEventAction } from \"../../actions/eventsAction\";\nimport Loading from \"../../components/Loading/Loading\";\nimport ErrorMessage from \"../../components/ErroMessage/ErrorMessage\";\nimport ReactMarkdown from \"react-markdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreateEvent({\n  history\n}) {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const dispatch = useDispatch();\n  const eventCreate = useSelector(state => state.noteCreate);\n  const {\n    loading,\n    error,\n    note\n  } = eventCreate;\n  console.log(note);\n\n  const resetHandler = () => {\n    setTitle(\"\");\n    setCategory(\"\");\n    setContent(\"\");\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(createEventAction(title, content, category));\n    if (!title || !content || !category) return;\n    resetHandler();\n    history.push(\"/myevents\");\n  };\n\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(MainScreen, {\n    title: \"Create an Event\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: \"Create a new Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            variant: \"danger\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 36\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"title\",\n              value: title,\n              placeholder: \"Enter the title\",\n              onChange: e => setTitle(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              value: content,\n              placeholder: \"Enter the content\",\n              rows: 4,\n              onChange: e => setContent(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), content && /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n              children: \"Event Preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n                children: content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"content\",\n              value: category,\n              placeholder: \"Enter the Category\",\n              onChange: e => setCategory(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), loading && /*#__PURE__*/_jsxDEV(Loading, {\n            size: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            style: {\n              marginTop: 10\n            },\n            children: \"Create Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mx-2\",\n            onClick: resetHandler,\n            variant: \"danger\",\n            style: {\n              marginTop: 10\n            },\n            children: \"Reset Fields\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n        className: \"text-muted\",\n        children: [\"Creating on - \", new Date().toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateEvent, \"nB5x7DBqTLZRmKsiaNqsV3Im6iQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CreateEvent;\nexport default CreateEvent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEvent\");","map":{"version":3,"sources":["E:/003_Personal_Portfolio/Experimental/event-manager/frontend/src/screens/SingleNote/CreateEvent.jsx"],"names":["React","useEffect","useState","MainScreen","Button","Card","Form","useDispatch","useSelector","createEventAction","Loading","ErrorMessage","ReactMarkdown","CreateEvent","history","title","setTitle","content","setContent","category","setCategory","dispatch","eventCreate","state","noteCreate","loading","error","note","console","log","resetHandler","submitHandler","e","preventDefault","push","target","value","marginTop","Date","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport MainScreen from \"../../components/MainScreen\";\r\nimport { Button, Card, Form } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createEventAction } from \"../../actions/eventsAction\";\r\nimport Loading from \"../../components/Loading/Loading\";\r\nimport ErrorMessage from \"../../components/ErroMessage/ErrorMessage\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nfunction CreateEvent ( { history } ) {\r\n    const [ title, setTitle ] = useState( \"\" );\r\n    const [ content, setContent ] = useState( \"\" );\r\n    const [ category, setCategory ] = useState( \"\" );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const eventCreate = useSelector( ( state ) => state.noteCreate );\r\n    const { loading, error, note } = eventCreate;\r\n\r\n    console.log( note );\r\n\r\n    const resetHandler = () => {\r\n        setTitle( \"\" );\r\n        setCategory( \"\" );\r\n        setContent( \"\" );\r\n    };\r\n\r\n    const submitHandler = ( e ) => {\r\n        e.preventDefault();\r\n        dispatch( createEventAction( title, content, category ) );\r\n        if ( !title || !content || !category ) return;\r\n\r\n        resetHandler();\r\n        history.push( \"/myevents\" );\r\n    };\r\n\r\n    useEffect( () => { }, [] );\r\n\r\n    return (\r\n        <MainScreen title=\"Create an Event\">\r\n            <Card>\r\n                <Card.Header>Create a new Event</Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={ submitHandler }>\r\n                        { error && <ErrorMessage variant=\"danger\">{ error }</ErrorMessage> }\r\n                        <Form.Group controlId=\"title\">\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control\r\n                                type=\"title\"\r\n                                value={ title }\r\n                                placeholder=\"Enter the title\"\r\n                                onChange={ ( e ) => setTitle( e.target.value ) }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"content\">\r\n                            <Form.Label>Content</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                value={ content }\r\n                                placeholder=\"Enter the content\"\r\n                                rows={ 4 }\r\n                                onChange={ ( e ) => setContent( e.target.value ) }\r\n                            />\r\n                        </Form.Group>\r\n                        { content && (\r\n                            <Card>\r\n                                <Card.Header>Event Preview</Card.Header>\r\n                                <Card.Body>\r\n                                    <ReactMarkdown>{ content }</ReactMarkdown>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        ) }\r\n\r\n                        <Form.Group controlId=\"content\">\r\n                            <Form.Label>Category</Form.Label>\r\n                            <Form.Control\r\n                                type=\"content\"\r\n                                value={ category }\r\n                                placeholder=\"Enter the Category\"\r\n                                onChange={ ( e ) => setCategory( e.target.value ) }\r\n                            />\r\n                        </Form.Group>\r\n                        { loading && <Loading size={ 50 } /> }\r\n                        <Button type=\"submit\" variant=\"primary\" style={ { marginTop: 10 } }>\r\n                            Create Event\r\n                        </Button>\r\n                        <Button className=\"mx-2\" onClick={ resetHandler } variant=\"danger\" style={ { marginTop: 10 } } >\r\n                            Reset Fields\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n\r\n                <Card.Footer className=\"text-muted\">\r\n                    Creating on - { new Date().toLocaleDateString() }\r\n                </Card.Footer>\r\n            </Card>\r\n        </MainScreen>\r\n    );\r\n}\r\n\r\nexport default CreateEvent;"]},"metadata":{},"sourceType":"module"}