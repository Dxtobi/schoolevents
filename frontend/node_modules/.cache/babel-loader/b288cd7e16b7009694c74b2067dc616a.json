{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from './../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password, pic) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users\", {\n      name,\n      pic,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["E:/003_Personal_Portfolio/Experimental/event-manager/frontend/src/actions/userAction.js"],"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","pic"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,eADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,WAJJ,EAKIC,kBALJ,EAMIC,qBANJ,EAOIC,qBAPJ,EAQIC,gBARJ,EASIC,mBATJ,EAUIC,mBAVJ,QAWO,8BAXP;AAaA,OAAO,MAAMC,KAAK,GAAG,CAAEC,KAAF,EAASC,QAAT,KAAuB,MAAQC,QAAR,IAAsB;AAC9D,MAAI;AACAA,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAEb;AAAR,KAAF,CAAR;AAEA,UAAMc,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CACnB,kBADmB,EAEnB;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAFmB,EAGnBG,MAHmB,CAAvB;AAMAF,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAEZ,kBAAR;AAA4BiB,MAAAA,OAAO,EAAEF;AAArC,KAAF,CAAR;AAEAG,IAAAA,YAAY,CAACC,OAAb,CAAsB,UAAtB,EAAkCC,IAAI,CAACC,SAAL,CAAgBN,IAAhB,CAAlC;AACH,GAlBD,CAkBE,OAAQO,KAAR,EAAgB;AACdX,IAAAA,QAAQ,CAAE;AACNC,MAAAA,IAAI,EAAEd,eADA;AAENmB,MAAAA,OAAO,EACHK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACMF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAD1B,GAEMF,KAAK,CAACE;AALV,KAAF,CAAR;AAOH;AACJ,CA5BM;AA+BP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAQd,QAAR,IAAsB;AAC9CO,EAAAA,YAAY,CAACQ,UAAb,CAAyB,UAAzB;AACAf,EAAAA,QAAQ,CAAE;AAAEC,IAAAA,IAAI,EAAEX;AAAR,GAAF,CAAR;AACH,CAHM;AAMP,OAAO,MAAM0B,QAAQ,GAAG,CAAEC,IAAF,EAAQnB,KAAR,EAAeC,QAAf,EAAyBmB,GAAzB,KAAkC,MAAQlB,QAAR,IAAsB;AAC5E,MAAI;AACAA,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAF,CAAR;AAEA,UAAMU,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CACnB,YADmB,EAEnB;AAAEY,MAAAA,IAAF;AAAQC,MAAAA,GAAR;AAAapB,MAAAA,KAAb;AAAoBC,MAAAA;AAApB,KAFmB,EAGnBG,MAHmB,CAAvB;AAMAF,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAER,qBAAR;AAA+Ba,MAAAA,OAAO,EAAEF;AAAxC,KAAF,CAAR;AAEAJ,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAEZ,kBAAR;AAA4BiB,MAAAA,OAAO,EAAEF;AAArC,KAAF,CAAR;AAEAG,IAAAA,YAAY,CAACC,OAAb,CAAsB,UAAtB,EAAkCC,IAAI,CAACC,SAAL,CAAgBN,IAAhB,CAAlC;AACH,GApBD,CAoBE,OAAQO,KAAR,EAAgB;AACdX,IAAAA,QAAQ,CAAE;AACNC,MAAAA,IAAI,EAAEV,kBADA;AAENe,MAAAA,OAAO,EACHK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACMF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAD1B,GAEMF,KAAK,CAACE;AALV,KAAF,CAAR;AAOH;AACJ,CA9BM","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGOUT,\r\n    USER_REGISTER_FAIL,\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n} from './../constants/userConstants';\r\n\r\nexport const login = ( email, password ) => async ( dispatch ) => {\r\n    try {\r\n        dispatch( { type: USER_LOGIN_REQUEST } );\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            \"/api/users/login\",\r\n            { email, password },\r\n            config\r\n        );\r\n\r\n        dispatch( { type: USER_LOGIN_SUCCESS, payload: data } );\r\n\r\n        localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n    } catch ( error ) {\r\n        dispatch( {\r\n            type: USER_LOGIN_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        } );\r\n    }\r\n};\r\n\r\n\r\nexport const logout = () => async ( dispatch ) => {\r\n    localStorage.removeItem( \"userInfo\" );\r\n    dispatch( { type: USER_LOGOUT } );\r\n};\r\n\r\n\r\nexport const register = ( name, email, password, pic ) => async ( dispatch ) => {\r\n    try {\r\n        dispatch( { type: USER_REGISTER_REQUEST } );\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            \"/api/users\",\r\n            { name, pic, email, password },\r\n            config\r\n        );\r\n\r\n        dispatch( { type: USER_REGISTER_SUCCESS, payload: data } );\r\n\r\n        dispatch( { type: USER_LOGIN_SUCCESS, payload: data } );\r\n\r\n        localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n    } catch ( error ) {\r\n        dispatch( {\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        } );\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}