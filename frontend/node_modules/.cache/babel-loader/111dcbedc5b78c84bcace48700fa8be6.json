{"ast":null,"code":"import { EVENTS_CREATE_FAIL, EVENTS_CREATE_REQUEST, EVENTS_CREATE_SUCCESS, EVENTS_DELETE_FAIL, EVENTS_DELETE_REQUEST, EVENTS_DELETE_SUCCESS, EVENTS_LIST_FAIL, EVENTS_LIST_REQUEST, EVENTS_LIST_SUCCESS, EVENTS_UPDATE_FAIL, EVENTS_UPDATE_REQUEST, EVENTS_UPDATE_SUCCESS } from \"../constants/eventsContants\";\nimport axios from \"axios\";\nexport const listEvents = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: EVENTS_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/events`, config);\n    dispatch({\n      type: EVENTS_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENTS_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createEventAction = (title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: EVENTS_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/events/create`, {\n      title,\n      content,\n      category\n    }, config);\n    dispatch({\n      type: EVENTS_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENTS_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteEventAction = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: EVENTS_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`/api/events/${id}`, config);\n    dispatch({\n      type: EVENTS_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENTS_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateEventAction = (id, title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: EVENTS_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/events/${id}`, {\n      title,\n      content,\n      category\n    }, config);\n    dispatch({\n      type: EVENTS_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENTS_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["E:/003_Personal_Portfolio/Experimental/event-manager/frontend/src/actions/eventsAction.js"],"names":["EVENTS_CREATE_FAIL","EVENTS_CREATE_REQUEST","EVENTS_CREATE_SUCCESS","EVENTS_DELETE_FAIL","EVENTS_DELETE_REQUEST","EVENTS_DELETE_SUCCESS","EVENTS_LIST_FAIL","EVENTS_LIST_REQUEST","EVENTS_LIST_SUCCESS","EVENTS_UPDATE_FAIL","EVENTS_UPDATE_REQUEST","EVENTS_UPDATE_SUCCESS","axios","listEvents","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","message","response","createEventAction","title","content","category","post","deleteEventAction","id","delete","updateEventAction","put"],"mappings":"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","sourcesContent":["import {\r\n    EVENTS_CREATE_FAIL,\r\n    EVENTS_CREATE_REQUEST,\r\n    EVENTS_CREATE_SUCCESS,\r\n    EVENTS_DELETE_FAIL,\r\n    EVENTS_DELETE_REQUEST,\r\n    EVENTS_DELETE_SUCCESS,\r\n    EVENTS_LIST_FAIL,\r\n    EVENTS_LIST_REQUEST,\r\n    EVENTS_LIST_SUCCESS,\r\n    EVENTS_UPDATE_FAIL,\r\n    EVENTS_UPDATE_REQUEST,\r\n    EVENTS_UPDATE_SUCCESS,\r\n} from \"../constants/eventsContants\";\r\nimport axios from \"axios\";\r\n\r\nexport const listEvents = () => async ( dispatch, getState ) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_LIST_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.get( `/api/events`, config );\r\n\r\n        dispatch( {\r\n            type: EVENTS_LIST_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_LIST_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const createEventAction = ( title, content, category ) => async (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_CREATE_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            `/api/events/create`,\r\n            { title, content, category, },\r\n            config\r\n        );\r\n\r\n        dispatch( {\r\n            type: EVENTS_CREATE_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_CREATE_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const deleteEventAction = ( id ) => async ( dispatch, getState ) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_DELETE_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.delete( `/api/events/${ id }`, config );\r\n\r\n        dispatch( {\r\n            type: EVENTS_DELETE_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_DELETE_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};\r\n\r\nexport const updateEventAction = ( id, title, content, category ) => async (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    try {\r\n        dispatch( {\r\n            type: EVENTS_UPDATE_REQUEST,\r\n        } );\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${ userInfo.token }`,\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.put(\r\n            `/api/events/${ id }`,\r\n            { title, content, category },\r\n            config\r\n        );\r\n\r\n        dispatch( {\r\n            type: EVENTS_UPDATE_SUCCESS,\r\n            payload: data,\r\n        } );\r\n    } catch ( error ) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n        dispatch( {\r\n            type: EVENTS_UPDATE_FAIL,\r\n            payload: message,\r\n        } );\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}