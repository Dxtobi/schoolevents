{"ast":null,"code":"/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\nimport { pointStart, pointEnd } from 'unist-util-position';\nimport { wrap } from '../wrap.js';\nimport { all } from '../traverse.js';\n/**\n * @type {Handler}\n * @param {Table} node\n */\n\nexport function table(h, node) {\n  var rows = node.children;\n  var index = rows.length;\n  var align = node.align || [];\n  /** @type {Array.<Element>} */\n\n  var result = [];\n\n  while (index--) {\n    var row = rows[index].children;\n    var name = index === 0 ? 'th' : 'td';\n    var pos = node.align ? align.length : row.length;\n    /** @type {Array.<Content>} */\n\n    var out = [];\n\n    while (pos--) {\n      var cell = row[pos];\n      out[pos] = h(cell, name, {\n        align: align[pos]\n      }, cell ? all(h, cell) : []);\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true));\n  }\n\n  return h(node, 'table', wrap([h(result[0].position, 'thead', wrap([result[0]], true))].concat(result[1] ? h({\n    start: pointStart(result[1]),\n    end: pointEnd(result[result.length - 1])\n  }, 'tbody', wrap(result.slice(1), true)) : []), true));\n}","map":{"version":3,"sources":["E:/003_Personal_Portfolio/Experimental/evenx-main/frontend/node_modules/mdast-util-to-hast/lib/handlers/table.js"],"names":["pointStart","pointEnd","wrap","all","table","h","node","rows","children","index","length","align","result","row","name","pos","out","cell","position","concat","start","end","slice"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,UAAR,EAAoBC,QAApB,QAAmC,qBAAnC;AACA,SAAQC,IAAR,QAAmB,YAAnB;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,CAAf,EAAkBC,IAAlB,EAAwB;AAC7B,MAAMC,IAAI,GAAGD,IAAI,CAACE,QAAlB;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACG,MAAjB;AACA,MAAMC,KAAK,GAAGL,IAAI,CAACK,KAAL,IAAc,EAA5B;AACA;;AACA,MAAMC,MAAM,GAAG,EAAf;;AAEA,SAAOH,KAAK,EAAZ,EAAgB;AACd,QAAMI,GAAG,GAAGN,IAAI,CAACE,KAAD,CAAJ,CAAYD,QAAxB;AACA,QAAMM,IAAI,GAAGL,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqB,IAAlC;AACA,QAAIM,GAAG,GAAGT,IAAI,CAACK,KAAL,GAAaA,KAAK,CAACD,MAAnB,GAA4BG,GAAG,CAACH,MAA1C;AACA;;AACA,QAAMM,GAAG,GAAG,EAAZ;;AAEA,WAAOD,GAAG,EAAV,EAAc;AACZ,UAAME,IAAI,GAAGJ,GAAG,CAACE,GAAD,CAAhB;AACAC,MAAAA,GAAG,CAACD,GAAD,CAAH,GAAWV,CAAC,CAACY,IAAD,EAAOH,IAAP,EAAa;AAACH,QAAAA,KAAK,EAAEA,KAAK,CAACI,GAAD;AAAb,OAAb,EAAkCE,IAAI,GAAGd,GAAG,CAACE,CAAD,EAAIY,IAAJ,CAAN,GAAkB,EAAxD,CAAZ;AACD;;AAEDL,IAAAA,MAAM,CAACH,KAAD,CAAN,GAAgBJ,CAAC,CAACE,IAAI,CAACE,KAAD,CAAL,EAAc,IAAd,EAAoBP,IAAI,CAACc,GAAD,EAAM,IAAN,CAAxB,CAAjB;AACD;;AAED,SAAOX,CAAC,CACNC,IADM,EAEN,OAFM,EAGNJ,IAAI,CACF,CAACG,CAAC,CAACO,MAAM,CAAC,CAAD,CAAN,CAAUM,QAAX,EAAqB,OAArB,EAA8BhB,IAAI,CAAC,CAACU,MAAM,CAAC,CAAD,CAAP,CAAD,EAAc,IAAd,CAAlC,CAAF,EAA0DO,MAA1D,CACEP,MAAM,CAAC,CAAD,CAAN,GACIP,CAAC,CACC;AACEe,IAAAA,KAAK,EAAEpB,UAAU,CAACY,MAAM,CAAC,CAAD,CAAP,CADnB;AAEES,IAAAA,GAAG,EAAEpB,QAAQ,CAACW,MAAM,CAACA,MAAM,CAACF,MAAP,GAAgB,CAAjB,CAAP;AAFf,GADD,EAKC,OALD,EAMCR,IAAI,CAACU,MAAM,CAACU,KAAP,CAAa,CAAb,CAAD,EAAkB,IAAlB,CANL,CADL,GASI,EAVN,CADE,EAaF,IAbE,CAHE,CAAR;AAmBD","sourcesContent":["/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = rows.length\n  const align = node.align || []\n  /** @type {Array.<Element>} */\n  const result = []\n\n  while (index--) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    let pos = node.align ? align.length : row.length\n    /** @type {Array.<Content>} */\n    const out = []\n\n    while (pos--) {\n      const cell = row[pos]\n      out[pos] = h(cell, name, {align: align[pos]}, cell ? all(h, cell) : [])\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}