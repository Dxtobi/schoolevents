{"ast":null,"code":"import _toConsumableArray from \"E:/003_Personal_Portfolio/Experimental/event-manager/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:/003_Personal_Portfolio/Experimental/event-manager/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/003_Personal_Portfolio/Experimental/event-manager/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a2bc1d8/types/node/globals.d.ts#L174>\n *\n * @typedef {string|Uint8Array} VFileValue\n *   Contents of the file.\n *   Can either be text, or a Buffer like structure.\n *   This does not directly use type `Buffer`, because it can also be used in a\n *   browser context.\n *   Instead this leverages `Uint8Array` which is the base type for `Buffer`,\n *   and a native JavaScript construct.\n *\n * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {VFileValue} [value]\n * @property {string} [cwd]\n * @property {Array.<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Object.<string, unknown>} [data]\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Object.<string, unknown>} VFileReporterSettings\n * @typedef {<T = VFileReporterSettings>(files: VFile[], options: T) => string} VFileReporter\n */\nimport buffer from 'is-buffer';\nimport { VFileMessage } from 'vfile-message';\nimport { path } from './minpath.js';\nimport { proc } from './minproc.js';\nimport { urlToPath, isUrl } from './minurl.js'; // Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\n\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nexport var VFile = /*#__PURE__*/function () {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All other given fields are set on the newly created `VFile`.\n   *\n   * Path related properties are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {VFileCompatible} [value]\n   */\n  function VFile(value) {\n    _classCallCheck(this, VFile);\n\n    /** @type {VFileOptions} */\n    var options;\n\n    if (!value) {\n      options = {};\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {\n        value: value\n      };\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value;\n    }\n    /**\n     * Place to store custom information.\n     * It’s OK to store custom data directly on the file, moving it to `data`\n     * gives a little more privacy.\n     * @type {Object.<string, unknown>}\n     */\n\n\n    this.data = {};\n    /**\n     * List of messages associated with the file.\n     * @type {Array.<VFileMessage>}\n     */\n\n    this.messages = [];\n    /**\n     * List of file paths the file moved between.\n     * @type {Array.<string>}\n     */\n\n    this.history = [];\n    /**\n     * Base of `path`.\n     * Defaults to `process.cwd()` (`/` in browsers).\n     * @type {string}\n     */\n\n    this.cwd = proc.cwd();\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Raw value.\n     * @type {VFileValue}\n     */\n\n    this.value; // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n\n    this.stored;\n    /**\n     * Sometimes files have a non-string representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n\n    this.result;\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `RawSourceMap` type from the `source-map` module.\n     * @type {unknown}\n     */\n\n    this.map;\n    /* eslint-enable no-unused-expressions */\n    // Set path related properties in the correct order.\n\n    var index = -1;\n\n    while (++index < order.length) {\n      var _prop = order[index]; // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n\n      if (_prop in options && options[_prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[_prop] = _prop === 'history' ? _toConsumableArray(options[_prop]) : options[_prop];\n      }\n    }\n    /** @type {string} */\n\n\n    var prop; // Set non-path related properties.\n\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop];\n    }\n  }\n  /**\n   * Access full path (`~/index.min.js`).\n   *\n   * @returns {string}\n   */\n\n\n  _createClass(VFile, [{\n    key: \"path\",\n    get: function get() {\n      return this.history[this.history.length - 1];\n    }\n    /**\n     * Set full path (`~/index.min.js`).\n     * Cannot be nullified.\n     *\n     * @param {string|URL} path\n     */\n    ,\n    set: function set(path) {\n      if (isUrl(path)) {\n        path = urlToPath(path);\n      }\n\n      assertNonEmpty(path, 'path');\n\n      if (this.path !== path) {\n        this.history.push(path);\n      }\n    }\n    /**\n     * Access parent path (`~`).\n     */\n\n  }, {\n    key: \"dirname\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n    }\n    /**\n     * Set parent path (`~`).\n     * Cannot be set if there's no `path` yet.\n     */\n    ,\n    set: function set(dirname) {\n      assertPath(this.basename, 'dirname');\n      this.path = path.join(dirname || '', this.basename);\n    }\n    /**\n     * Access basename (including extname) (`index.min.js`).\n     */\n\n  }, {\n    key: \"basename\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n    }\n    /**\n     * Set basename (`index.min.js`).\n     * Cannot contain path separators.\n     * Cannot be nullified either (use `file.path = file.dirname` instead).\n     */\n    ,\n    set: function set(basename) {\n      assertNonEmpty(basename, 'basename');\n      assertPart(basename, 'basename');\n      this.path = path.join(this.dirname || '', basename);\n    }\n    /**\n     * Access extname (including dot) (`.js`).\n     */\n\n  }, {\n    key: \"extname\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n    }\n    /**\n     * Set extname (including dot) (`.js`).\n     * Cannot be set if there's no `path` yet and cannot contain path separators.\n     */\n    ,\n    set: function set(extname) {\n      assertPart(extname, 'extname');\n      assertPath(this.dirname, 'extname');\n\n      if (extname) {\n        if (extname.charCodeAt(0) !== 46\n        /* `.` */\n        ) {\n          throw new Error('`extname` must start with `.`');\n        }\n\n        if (extname.includes('.', 1)) {\n          throw new Error('`extname` cannot contain multiple dots');\n        }\n      }\n\n      this.path = path.join(this.dirname, this.stem + (extname || ''));\n    }\n    /**\n     * Access stem (w/o extname) (`index.min`).\n     */\n\n  }, {\n    key: \"stem\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n    }\n    /**\n     * Set stem (w/o extname) (`index.min`).\n     * Cannot be nullified, and cannot contain path separators.\n     */\n    ,\n    set: function set(stem) {\n      assertNonEmpty(stem, 'stem');\n      assertPart(stem, 'stem');\n      this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n    }\n    /**\n     * Serialize the file.\n     *\n     * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(encoding) {\n      // @ts-expect-error string’s don’t accept the parameter, but buffers do.\n      return (this.value || '').toString(encoding);\n    }\n    /**\n     * Create a message and associates it w/ the file.\n     *\n     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n     * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n     * @param {string} [origin] Place in code the message originates from (`string`, optional).\n     * @returns {VFileMessage}\n     */\n\n  }, {\n    key: \"message\",\n    value: function message(reason, place, origin) {\n      var message = new VFileMessage(reason, place, origin);\n\n      if (this.path) {\n        message.name = this.path + ':' + message.name;\n        message.file = this.path;\n      }\n\n      message.fatal = false;\n      this.messages.push(message);\n      return message;\n    }\n    /**\n     * Info: create a message, associate it with the file, and mark the fatality\n     * as `null`.\n     * Calls `message()` internally.\n     *\n     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n     * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n     * @param {string} [origin] Place in code the message originates from (`string`, optional).\n     * @returns {VFileMessage}\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = null;\n      return message;\n    }\n    /**\n     * Fail: create a message, associate it with the file, mark the fatality as\n     * `true`.\n     * Note: fatal errors mean a file is no longer processable.\n     * Calls `message()` internally.\n     *\n     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n     * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n     * @param {string} [origin] Place in code the message originates from (`string`, optional).\n     * @returns {never}\n     */\n\n  }, {\n    key: \"fail\",\n    value: function fail(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = true;\n      throw message;\n    }\n  }]);\n\n  return VFile;\n}();\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\n\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\n\n\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\n\n\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}","map":{"version":3,"sources":["E:/003_Personal_Portfolio/Experimental/event-manager/frontend/node_modules/vfile/lib/index.js"],"names":["buffer","VFileMessage","path","proc","urlToPath","isUrl","order","VFile","value","options","data","messages","history","cwd","stored","result","map","index","length","prop","undefined","includes","assertNonEmpty","push","dirname","assertPath","basename","join","assertPart","extname","charCodeAt","Error","stem","encoding","toString","reason","place","origin","message","name","file","fatal","part","sep"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a2bc1d8/types/node/globals.d.ts#L174>\n *\n * @typedef {string|Uint8Array} VFileValue\n *   Contents of the file.\n *   Can either be text, or a Buffer like structure.\n *   This does not directly use type `Buffer`, because it can also be used in a\n *   browser context.\n *   Instead this leverages `Uint8Array` which is the base type for `Buffer`,\n *   and a native JavaScript construct.\n *\n * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {VFileValue} [value]\n * @property {string} [cwd]\n * @property {Array.<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Object.<string, unknown>} [data]\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Object.<string, unknown>} VFileReporterSettings\n * @typedef {<T = VFileReporterSettings>(files: VFile[], options: T) => string} VFileReporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All other given fields are set on the newly created `VFile`.\n   *\n   * Path related properties are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {VFileCompatible} [value]\n   */\n  constructor(value) {\n    /** @type {VFileOptions} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information.\n     * It’s OK to store custom data directly on the file, moving it to `data`\n     * gives a little more privacy.\n     * @type {Object.<string, unknown>}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array.<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of file paths the file moved between.\n     * @type {Array.<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path`.\n     * Defaults to `process.cwd()` (`/` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {VFileValue}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `RawSourceMap` type from the `source-map` module.\n     * @type {unknown}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Access full path (`~/index.min.js`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set full path (`~/index.min.js`).\n   * Cannot be nullified.\n   *\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Access parent path (`~`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set parent path (`~`).\n   * Cannot be set if there's no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Access basename (including extname) (`index.min.js`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (`index.min.js`).\n   * Cannot contain path separators.\n   * Cannot be nullified either (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Access extname (including dot) (`.js`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set extname (including dot) (`.js`).\n   * Cannot be set if there's no `path` yet and cannot contain path separators.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Access stem (w/o extname) (`index.min`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set stem (w/o extname) (`index.min`).\n   * Cannot be nullified, and cannot contain path separators.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.\n   * @returns {string}\n   */\n  toString(encoding) {\n    // @ts-expect-error string’s don’t accept the parameter, but buffers do.\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Create a message and associates it w/ the file.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Info: create a message, associate it with the file, and mark the fatality\n   * as `null`.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Fail: create a message, associate it with the file, mark the fatality as\n   * `true`.\n   * Note: fatal errors mean a file is no longer processable.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {never}\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}